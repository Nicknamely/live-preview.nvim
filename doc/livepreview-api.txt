
==============================================================================
Lua module : require("livepreview")                          *livepreview-api*

This document is about API from live-preview.nvim, a plugin for live
previewing markdown, asciidoc, and html files.

To work with API from this plugin, require it in your Lua code: >lua
    local livepreview = require('livepreview')
<


live_start({filepath}, {port})                      *livepreview.live_start()*
    Start live-preview server

    Parameters: ~
      • {filepath}  (`string`) path to the file
      • {port}      (`number`) port to run the server on

live_stop()                                          *livepreview.live_stop()*
    Stop live-preview server

setup({opts})                                            *livepreview.setup()*
    Setup live preview

    Parameters: ~
      • {opts}  (`{commands: {start: string, stop: string}, port: number, browser: string, sync_scroll: boolean, telescope: {autoload: boolean}}?`)
                Default options: >lua
                    {
                    	commands = {
                    		start = "LivePreview",
                    		stop = "StopPreview",
                    	},
                    	port = 5500,
                    	autokill = false,
                    	browser = "default",
                    	dynamic_root = false,
                    	sync_scroll = false,
                    	telescope = {
                    		autoload = false,
                    	}
                    }
<


==============================================================================
Live Preview Module : SERVER                              *livepreview.server*

Server module for live-preview.nvim To require this module, do >lua
    local server = require('livepreview.server')
<


*Server*
    To call this class, do >lua
        local Server = require('livepreview.server').Server
<

    Fields: ~
      • {new}        (`fun(self: Server, webroot: string?, config: table?)`)
                     Constructor
      • {routes}     (`fun(self: Server, path: string): string`) Handle routes
      • {watch_dir}  (`fun(self: Server, func: function)`) Watch a directory
                     for changes and send a message "reload" to a WebSocket
                     client
      • {start}      (`fun(self: Server, ip: string, port: number, func: function?)`)
                     Start the server
      • {stop}       (`fun(self: Server)`) Stop the server


Server:new({webroot}, {config})              *livepreview.server.Server:new()*
    Constructor

    Parameters: ~
      • {webroot}  (`string?`) path to the webroot
      • {config}   (`table?`) configuration

Server:routes({path})                     *livepreview.server.Server:routes()*
    Handle routes

    Parameters: ~
      • {path}  (`string`) path from the http request

    Return: ~
        (`string`) path to the file

Server:start({ip}, {port}, {func})         *livepreview.server.Server:start()*
    Start the server

    Parameters: ~
      • {ip}    (`string`) IP address to bind to
      • {port}  (`number`) port to bind to
      • {func}  (`function?`) Function to call when there is a change in the
                watched directory
                • client uv_tcp_t: The uv_tcp client passed to func

Server:stop()                               *livepreview.server.Server:stop()*
    Stop the server

Server:watch_dir({func})               *livepreview.server.Server:watch_dir()*
    Watch a directory for changes and send a message "reload" to a WebSocket
    client

    Parameters: ~
      • {func}  (`function`) function to call when a change is detected


==============================================================================
Live Preview Module : HANDLER                            *livepreview.handler*

HTTP handler module for server in live-preview.nvim To require this module, do >lua
    local handler = require('livepreview.server.handler')
<


client({client}, {callback})             *livepreview.server.handler.client()*
    Handle a client connection, read the request and send a response

    Parameters: ~
      • {client}    (`uv_tcp_t`) client connection
      • {callback}  (`function`)
                    • `err`: Error message, if any (nil if no error)
                    • `data`: Request from the client

    Return: ~
        (`string`) request from the client

request({request})                      *livepreview.server.handler.request()*
    Handle an HTTP request If the request is a websocket upgrade request, it
    will call websocket handshake Otherwise, if it is a GET request, return
    the path from it

    Parameters: ~
      • {request}  (`string`) HTTP request

    Return: ~
        (`{path: string, if_none_match: string}?`) path to the file and
        If-None-Match header

                             *livepreview.server.handler.send_http_response()*
send_http_response({client}, {status}, {content_type}, {body}, {headers})
    Send an HTTP response

    Parameters: ~
      • {client}        (`uv_tcp_t`) client connection
      • {status}        (`string`) for example "200 OK", "404 Not Found", etc.
      • {content_type}  (`string`) MIME type of the response
      • {body}          (`string`) body of the response
      • {headers}       (`table?`) (optional) additional headers to include in
                        the response

                                     *livepreview.server.handler.serve_file()*
serve_file({client}, {file_path})
    Serve a file to the client

    Parameters: ~
      • {client}     (`uv_tcp_t`) client connection
      • {file_path}  (`string`) path to the file


==============================================================================
Live Preview Module : WEBSOCKET                        *livepreview.websocket*

WebSocket server implementation To require this module, do >lua
    local websocket = require('livepreview.server.websocket')
<


                                    *livepreview.server.websocket.handshake()*
handshake({client}, {request})
    Handle a WebSocket handshake request

    Parameters: ~
      • {client}   (`uv_tcp_t`) client
      • {request}  (`string`) client request

send({client}, {message})                *livepreview.server.websocket.send()*
    Send a message to a WebSocket client

    Parameters: ~
      • {client}   (`uv_tcp_t`) client
      • {message}  (`string`) message to send

                                    *livepreview.server.websocket.send_json()*
send_json({client}, {message})
    Send a JSON message to a WebSocket client

    Parameters: ~
      • {client}   (`uv_tcp_t`) client
      • {message}  (`table`) message to send


==============================================================================
Live Preview Module : CONTENT_TYPE                  *livepreview.content_type*

Content type module for the server To require this module, do >lua
    local content_type = require('livepreview.server.utils.content_type')
<


get({file_path})                 *livepreview.server.utils.content_type.get()*
    Get the content type of a file

    Parameters: ~
      • {file_path}  (`string`) path to the file

    Return: ~
        (`string?`) content type

mime                              *livepreview.server.utils.content_type.mime*
    Table of file extensions and their corresponding MIME types

    Example: >lua
        mime["html"] -- Output : "text/html"
<


==============================================================================
Live Preview Module : ETAG                                  *livepreview.etag*

ETag module To require this module, do >lua
    local etag = require('livepreview.server.utils.etag')
<


generate({file_path})               *livepreview.server.utils.etag.generate()*
    Generate an ETag for a file The Etag is generated based on the
    modification time of the file

    Parameters: ~
      • {file_path}  (`string`) path to the file

    Return: ~
        (`string?`) ETag


==============================================================================
Live Preview Module : UTILS                                *livepreview.utils*

Utility functions for live-preview.nvim To require this module, do >lua
    local utils = require('livepreview.utils')
<


await_term_cmd({cmd})                     *livepreview.utils.await_term_cmd()*
    Execute a shell command and wait for the exit

    Parameters: ~
      • {cmd}  (`string`) terminal command to execute. Term_cmd will use sh or
               pwsh depending on the OS

    Return: ~
        (`{code: number, signal: number, stdout: string, stderr: string}`) a
        table with fields code, stdout, stderr, signal

                                           *livepreview.utils.get_base_path()*
get_base_path({full_path}, {parent_path})
    Extract base path from a file path Example: ```lua
    get_base_path("/home/user/.config/nvim/lua/livepreview/utils.lua",
    "/home/user/.config/nvim/") >
        will return "lua/livepreview/utils.lua"
<

    Parameters: ~
      • {full_path}    (`string`)
      • {parent_path}  (`string`)

    Return: ~
        (`string`)

                                         *livepreview.utils.get_parent_path()*
get_parent_path({full_path}, {subpath})
    Get the parent path of a subpath

    Example: ```lua
    get_parent_path("/home/user/.config/nvim/lua/livepreview/utils.lua",
    "/lua/livepreview/utils.lua") >
        will return "/home/user/.config/nvim"
<

    Parameters: ~
      • {full_path}  (`string`)
      • {subpath}    (`string`)

    Return: ~
        (`string?`)

get_path_lua_file()                    *livepreview.utils.get_path_lua_file()*
    Get path of the Lua file where the function is called

    Return: ~
        (`string?`)

get_plugin_path()                        *livepreview.utils.get_plugin_path()*
    Get the path where live-preview.nvim is installed

joinpath({...})                                 *livepreview.utils.joinpath()*
    Join paths using the correct separator for the OS

    Parameters: ~
      • {...}  (`string`) paths to join

    Return: ~
        (`string`) the joined path example: ```lua joinpath("home", "user",
        "file.txt") -- returns "home/user/file.txt" joinpath("home", "user",
        "folder", "../file.txt") -- returns "home/user/file.txt" >
<

kill({pid})                                         *livepreview.utils.kill()*
    Kill a process by PID

    Parameters: ~
      • {pid}  (`number`)

                                    *livepreview.utils.list_supported_files()*
list_supported_files({directory})
    Find supported files in a directory and its subdirectories

    Parameters: ~
      • {directory}  (`string`)

    Return: ~
        (`table`) a table with the paths of the supported files

open_browser({path}, {browser})             *livepreview.utils.open_browser()*
    Open URL in the browser

    Example: ```lua open_browser("https://neovim.io/", "firefox")
    open_browser("https://neovim.io/", "flatpak run com.microsoft.Edge") >
<

    Parameters: ~
      • {path}     (`string`)
      • {browser}  (`string?`)

                             *livepreview.utils.processes_listening_on_port()*
processes_listening_on_port({port})
    Get a list of processes listening on a port

    Parameters: ~
      • {port}  (`number`)

    Return: ~
        (`{name : string, pid : number}[]`) a table with the processes
        listening on the port (except for the current process), including name
        and PID

sha1({val})                                         *livepreview.utils.sha1()*
    Compute the SHA1 hash of a string.

    Copyright (C) 2007 *Free Software Foundation, Inc*.

    Parameters: ~
      • {val}  (`string`)

    Return: ~
        (`string`) SHA1 hash

                                      *livepreview.utils.supported_filetype()*
supported_filetype({file_name})
    Check if file name has a supported filetype (html, markdown, asciidoc).
    Warning: this function will call a Vimscript function

    Parameters: ~
      • {file_name}  (`string`)

    Return: ~
        (`filetype`) string

term_cmd({cmd}, {callback})                     *livepreview.utils.term_cmd()*
    Execute a shell commands

    Parameters: ~
      • {cmd}       (`string`) terminal command to execute. Term_cmd will use
                    sh or pwsh depending on the OS
      • {callback}  (`function?`) function to call when the command finishes.
                    • code: the exit code of the command
                    • signal: the signal that killed the process
                    • stdout: the standard output of the command
                    • stderr: the standard error of the command

uv_read_file({file_path})                   *livepreview.utils.uv_read_file()*
    Read a file using libuv

    Parameters: ~
      • {file_path}  (`string`)

uv_write_file({file_path})                 *livepreview.utils.uv_write_file()*
    Write a file using libuv

    Parameters: ~
      • {file_path}  (`string`)


==============================================================================
Live Preview Module : FSWATCH                            *livepreview.fswatch*

Non-native file system watcher.

This is made because |luv| (|vim.uv|) doesn't support recursive directory
watching in other OSes than Windows and OSX

This module has only been tested on Linux. For Windows and OSX, it is
recommended to use |uv_fs_event_t| with flag { recursive = true }

To use this module, do: >lua
    local fswatch = require('livepreview.fswatch')
<


*Watcher*
    To call this class, do: >lua
        Watcher = require('livepreview.fswatch').Watcher
<

    Fields: ~
      • {directory}  (`string`)
      • {watcher}    (`uv_fs_event_t`)
      • {children}   (`Watcher[]`)
      • {new}        (`fun(self: Watcher, directory: string): Watcher`) Create
                     a new Watcher for a directory.
      • {start}      (`fun(self: Watcher, callback: function)`) Start watching
                     a directory and its subdirectories.
      • {close}      (`fun(self: Watcher)`) Close the watcher and all its
                     children.


Watcher:close()                          *livepreview.fswatch.Watcher:close()*
    Close the watcher and all its children.

Watcher:new({directory})                   *livepreview.fswatch.Watcher:new()*
    Create a new Watcher for a directory.

    Parameters: ~
      • {directory}  (`string`)

    Return: ~
        (`Watcher`)

Watcher:start({callback})                *livepreview.fswatch.Watcher:start()*
    Start watching a directory and its subdirectories.

    Parameters: ~
      • {callback}  (`function`)


==============================================================================
Live Preview Module : HEALTH                              *livepreview.health*

To run health check for Live Preview, do >vim
    :checkhealth livepreview
<


check()                                           *livepreview.health.check()*
    Run checkhealth for Live Preview. This can also be called using
    `:checkhealth livepreview`

is_nvim_compatible()                 *livepreview.health.is_nvim_compatible()*
    Check if the current Nvim version is compatible with Live Preview

    Return: ~
        (`boolean`) true if compatible, false otherwise

nvim_ver                                         *livepreview.health.nvim_ver*

spec()                                             *livepreview.health.spec()*
    Returns the metadata (pkg.json) of live-preview.nvim as a table.

    Return: ~
        (`table?`)

supported_nvim_ver_range         *livepreview.health.supported_nvim_ver_range*


 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
